# 商城微信小程序项目技术架构设计文档

## 1. 项目概述

本项目是一个完整的电商系统，包含三个子项目：
- 微信小程序前端（用户购物界面）
- 后台管理系统（商家管理界面）
- 后端API服务（数据接口服务）

## 2. 整体架构图

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   微信小程序     │    │   后台管理系统     │    │   后端API服务    │
│   (前端)        │    │   前端：Vue3      |    |   (Node.js)     |
                      |   后端：Node.js   │      
└─────────┬───────┘    └─────────┬───────┘    └─────────┬───────┘
          │                      │                      │
          └──────────────────────┼──────────────────────┘
                                 │
                    ┌─────────────┴─────────────┐
                    │        MySQL数据库        │
                    │      (数据存储)           │
                    └───────────────────────────┘
```

## 3. 技术栈选择

### 3.1 微信小程序前端
- **开发框架**: 微信小程序原生开发
- **页面结构**: WXML + WXSS + JavaScript
- **开发工具**: 微信开发者工具
- **特点**: 轻量级、性能好、用户体验佳

### 3.2 后台管理系统（前后端一体化）
- **前端框架**: Vue3 + Element Plus
- **构建工具**: Vite
- **UI组件库**: Element Plus
- **特点**: 现代化、组件化、开发效率高

- **后端框架**: Node.js + Express.js
- **运行环境**: Node.js
- **Web框架**: Express.js
- **数据库**: MySQL
- **特点**: 轻量级、开发快速、生态丰富


### 3.3 后端API服务
- **运行环境**: Node.js
- **Web框架**: Express.js
- **数据库**: MySQL
- **特点**: 轻量级、开发快速、生态丰富

## 4. 安全设计

### 4.1 身份认证
- **微信小程序**: 使用微信官方登录，获取用户openid和session_key
- **后台管理**: 使用JWT Token进行身份验证
- **Token过期**: 设置合理的过期时间，定期刷新
- **密码加密**：使用MD5进行密码加密存储

### 4.2 数据安全
- **数据库密码**: 使用环境变量存储，不在代码中硬编码
- **API接口**: 所有接口都需要身份验证
- **数据传输**: 使用HTTPS协议加密传输
- **SQL注入防护**: 使用参数化查询，避免直接拼接SQL
- 防止XSS攻击：输入过滤，输出转义
- 防止CSRF攻击：使用Token验证

### 4.3 小程序安全
- **域名白名单**: 配置合法域名，防止恶意请求
- **数据校验**: 前端和后端双重数据验证
- **敏感信息**: 不在前端存储敏感数据

### 4.4 管理后台安全
- **登录限制**: 限制登录失败次数，防止暴力破解
- **权限控制**: 基于角色的访问控制(RBAC)
- **操作日志**: 记录重要操作，便于审计

## 5. 数据库设计

### 5.1 主要数据表
- **用户表**：存储用户基本信息（如openid、昵称、头像、手机号等），满足“我的”页面用户信息展示、登录、订单、地址等功能需求。
- **商品表**：存储商品信息（名称、图片、价格、库存、所属分类、描述等），满足首页推荐、分类商品、商品详情、购物车、订单等功能需求。
- **分类表**：存储商品分类（分类名称、图片、排序、状态等），满足首页分类、分类页、分类商品列表等功能需求。
- **订单表**：存储订单信息（订单号、用户、商品、金额、状态、下单时间、收货地址等），满足订单列表、订单详情、订单确认、支付等功能需求。
- **订单商品表**：用于存储每个订单下的商品明细（订单ID、商品ID、数量、单价等），满足一个订单包含多个商品的需求。
- **购物车表**：存储用户购物车数据（用户ID、商品ID、数量等），满足购物车列表、加减商品、结算等功能需求。
- **地址表**：存储用户收货地址（用户ID、收货人、电话、地址、是否默认等），满足地址列表、编辑、新增、选择等功能需求。
- **轮播图表**：存储首页轮播图（图片、标题、跳转链接、排序、状态等），满足首页轮播图展示和后台管理需求。
- **管理员表**：存储后台管理员信息（用户名、密码、角色等），满足后台登录、权限管理等需求。


### 5.2 数据关系
- 用户可以有多个订单和地址
- 商品属于某个分类
- 订单包含多个商品
- 购物车关联用户和商品


### 5.3 文件存储
   - 商品图片
   - 轮播图

## 6. API接口设计

### 6.1 接口规范
- **请求方式**: RESTful API设计
- **数据格式**: JSON格式
- **状态码**: 使用标准HTTP状态码
- **错误处理**: 统一的错误响应格式

### 6.2 接口分类
- **用户相关**: 登录、注册、信息获取
- **商品相关**: 商品列表、详情、搜索
- **订单相关**: 创建订单、支付、查询
- **购物车**: 添加、删除、修改商品
- **地址管理**: 增删改查收货地址

## 7. 部署架构

### 7.0 配置文件管理与环境区分设计

为实现开发环境、测试环境、生产环境等多环境的灵活切换，系统采用分环境配置文件管理方案。具体设计如下：

#### 7.0.1 配置文件结构

- `config/`
  - `config.base.js`         // 通用基础配置，所有环境共享
  - `config.development.js`  // 开发环境专用配置
  - `config.production.js`   // 生产环境专用配置
  - `config.test.js`         // 测试环境专用配置（如有需要）
  - `index.js`               // 配置入口，根据环境变量动态加载合适配置

#### 7.0.2 配置文件内容示例

- `config.base.js`（基础配置，所有环境通用）
  ```js
  module.exports = {
    port: 3000,
    jwtSecret: 'your_jwt_secret',
    // 其他通用配置
  }
  ```

- `config.development.js`（开发环境专用配置）
  ```js
  module.exports = {
    database: {
      host: 'localhost',
      user: 'root',
      password: 'dev_password',
      database: 'mini_shop_dev'
    },
    fileUpload: {
      type: 'local',
      path: './uploads'
    },
    logLevel: 'debug',
    apiBaseUrl: 'http://localhost:3000'
  }
  ```

- `config.production.js`（生产环境专用配置）
  ```js
  module.exports = {
    database: {
      host: 'prod-db-host',
      user: 'prod_user',
      password: process.env.DB_PASSWORD, // 推荐用环境变量
      database: 'mini_shop'
    },
    fileUpload: {
      type: 'cloud',
      provider: 'aliyun-oss',
      bucket: 'your-bucket'
    },
    logLevel: 'debug',
    apiBaseUrl: 'https://api.yourdomain.com'
  }
  ```

#### 7.0.3 配置文件加载机制

- 通过环境变量 `NODE_ENV` 判断当前运行环境（如 development、production、test）。
- `config/index.js` 动态加载对应环境的配置文件，并与基础配置合并，环境专用配置会覆盖基础配置中的同名项。

  ```js
  // config/index.js
  const env = process.env.NODE_ENV || 'development'
  const baseConfig = require('./config.base.js')
  const envConfig = require(`./config.${env}.js`)
  module.exports = { ...baseConfig, ...envConfig }
  ```

- 在主程序中统一引入配置：
  ```js
  // app.js
  const config = require('./config')
  app.set('port', config.port)
  // 其他配置使用
  ```

#### 7.0.4 环境变量管理

- 敏感信息（如数据库密码、API密钥等）不直接写入配置文件，统一通过环境变量注入。
- 使用 `.env` 文件管理本地开发环境变量，生产环境变量通过服务器环境配置。
- `.env` 文件示例：
  ```
  NODE_ENV=development
  DB_PASSWORD=dev_password
  JWT_SECRET=your_jwt_secret
  ```
- `.env.production` 文件示例（仅在生产环境服务器配置，不提交到代码仓库）：
  ```
  NODE_ENV=production
  DB_PASSWORD=prod_password
  JWT_SECRET=prod_jwt_secret
  ```

- 推荐使用 [dotenv](https://www.npmjs.com/package/dotenv) 等库在 Node.js 项目中自动加载 `.env` 文件内容到 `process.env`。

#### 7.0.5 启动命令示例

- 开发环境启动：
  ```
  NODE_ENV=development node app.js
  ```
- 生产环境启动：
  ```
  NODE_ENV=production node app.js
  ```


#### 7.0.6 代码仓库安全

- `.env.production`、`.env` 等包含敏感信息的文件应加入 `.gitignore`，防止泄露。
- 仅将 `.env.example`（示例文件，无敏感信息）提交到仓库，便于团队成员参考。

#### 7.0.7 配置使用注意事项

- 业务代码中统一通过 `require('./config')` 获取配置，避免硬编码。
- 新增环境时只需增加对应的配置文件，并在启动时指定 `NODE_ENV` 即可。

通过上述设计，项目可灵活支持多环境部署，配置安全、清晰、易于维护，满足实际开发和运维需求。

### 7.1 开发环境
- **本地开发**: 使用本地数据库和服务器
- **版本控制**: Git管理代码版本
- **开发工具**: VS Code、微信开发者工具

- 特点配置:
       - 数据库: 本地MySQL
       - 文件上传: 本地存储
       - 日志级别: debug
       - API地址: localhost
       - 调试模式: 开启

### 7.2 生产环境
- 应用服务器：Node.js服务器
- 数据库服务器：MySQL服务器
- **域名**: 配置SSL证书，使用HTTPS
- **CDN**: 静态资源加速

- 特点配置:
    - 数据库: 生产服务器MySQL集群
    - 文件上传: 云存储
    - 日志级别: debug
    - 调试模式: 关闭



## 8. 性能优化

### 8.1 前端优化
- **图片压缩**: 使用WebP格式，合理压缩
- **代码分割**: 按需加载，减少包体积
- **缓存策略**: 合理使用本地缓存

### 8.2 后端优化
- **数据库索引**: 为常用查询字段建立索引
- **连接池**: 使用数据库连接池

## 9. 监控和维护

### 9.1 日志管理
- **访问日志**: 记录API访问情况
- **错误日志**: 记录系统错误信息
- **业务日志**: 记录重要业务操作

### 9.2 监控告警
- **服务器监控**: CPU、内存、磁盘使用率
- **数据库监控**: 连接数、查询性能
- **接口监控**: 响应时间、错误率

## 10. 扩展性考虑

### 10.1 水平扩展
- **负载均衡**: 支持多服务器部署
- **数据库分库**: 支持数据分片
- **微服务**: 支持服务拆分

### 10.2 功能扩展
- **支付方式**: 微信支付
- **数据分析**: 支持数据统计和分析

## 11. 开发流程

### 11.1 开发阶段
1. 需求分析和设计
2. 数据库设计
3. API接口开发
4. 前端页面开发
5. 测试和调试
6. 部署上线

### 11.2 维护阶段
1. 功能迭代更新
2. 性能监控优化
3. 安全漏洞修复
4. 用户反馈处理

## 12. 总结

本架构设计采用成熟稳定的技术栈，注重安全性和可维护性。通过合理的分层设计和模块化开发，确保系统的稳定运行和后续扩展。整个系统架构简洁明了，便于理解和维护。
