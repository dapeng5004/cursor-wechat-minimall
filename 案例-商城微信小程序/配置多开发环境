
##配置不同开发环境的配置文件
- 本地开发环境
     - 配置文件: config.development.js
     - 环境变量: NODE_ENV=development
     - 特点配置:
       - 数据库: 本地MySQL
       - 文件上传: 本地存储
       - 日志级别: debug
       - API地址: localhost
       - 调试模式: 开启

   - 生产环境
     - 配置文件: config.production.js  
     - 环境变量: NODE_ENV=production
     - 特点配置:
       - 数据库: 生产服务器MySQL集群
       - 文件上传: 云存储
       - 日志级别: debug
       - API地址: mall-server.guoxu.tech
       - 调试模式: 关闭

   - 配置文件加载机制
     - 通过环境变量NODE_ENV判断当前环境
     - 根据环境加载对应配置文件:
       ```js
       // config/index.js
       const env = process.env.NODE_ENV || 'development'
       const config = require(`./config.${env}.js`)
       module.exports = config
       ```
     - 配置文件合并策略:
       - 基础配置(config.base.js): 存放所有环境通用配置
       - 环境配置(config.development.js/config.production.js): 存放特定环境配置
       - 环境配置覆盖基础配置
     - 配置文件使用:
       ```js
       // app.js
       const config = require('./config')
       app.set('port', config.port)
       app.set('db', config.database)
       ```
     - 敏感配置:
       - 数据库密码、API密钥等敏感信息使用环境变量
       - 通过.env文件管理环境变量
       - 生产环境的.env文件不提交到代码仓库

请根据以上内容，帮我完善代码，要实现多环境的配置文件切换功能。
并且，我的启动方式是使用 node app.js

开发环境（默认）
NODE_ENV=development node app.js
或直接
node app.js

会自动加载 config.base.js + config.development.js，并合并 .env 环境变量。
生产环境
NODE_ENV=production node app.js
会自动加载 config.base.js + config.production.js，并合并 .env 环境变量。

配置文件说明
config.base.js：所有环境通用配置
config.development.js：开发环境专用配置
config.production.js：生产环境专用配置
index.js：自动根据 NODE_ENV 合并加载